
#--------------------------------------------------------------------------------------------------------------------------
#    Python libraries
#--------------------------------------------------------------------------------------------------------------------------

import os
import pandas as pd
import numpy as np
import importlib

from inspect import getsourcefile
from os.path import abspath
import sys

#--------------------------------------------------------------------------------------------------------------------------
#    Custom Class
#--------------------------------------------------------------------------------------------------------------------------


# Community model tools
from cmSpice.core.communityJsonGenerator import CommunityJsonGenerator

# Community detection
from cmSpice.algorithms.clustering.explainedCommunitiesDetection import ExplainedCommunitiesDetection

# similarity measures
from cmSpice.algorithms.similarity.complexSimilarityDAO import ComplexSimilarityDAO

# dao
from cmSpice.dao.dao_csv import DAO_csv
from cmSpice.dao.dao_json import DAO_json
from cmSpice.dao.dao_db_users import DAO_db_users
from cmSpice.dao.dao_db_distanceMatrixes import DAO_db_distanceMatrixes
from cmSpice.dao.dao_db_communities import DAO_db_community
from cmSpice.dao.dao_db_similarities import DAO_db_similarity

from itertools import combinations_with_replacement
from itertools import combinations


#--------------------------------------------------------------------------------------------------------------------------
#    Class
#--------------------------------------------------------------------------------------------------------------------------

class CommunitiesSimilarityModel():

    def __init__(self,perspectiveId, data, distanceMatrix):
        """
        Construct of Community Model objects.

        Parameters
        ----------
            perspectiveId:
                id of the perspective to which the communities we want to calculate similarity on belong
        """
        self.perspectiveId = perspectiveId
        self.data = data
        self.distanceMatrix = distanceMatrix

        self.updateCommunitiesSimilarityCollection()
        
        print("Calculating similarities between communities for the ones generated by perspective [" + str(perspectiveId) + "]")

#--------------------------------------------------------------------------------------------------------------------------
#   Compute similarity between communities
#--------------------------------------------------------------------------------------------------------------------------
    
    def updateCommunitiesSimilarityCollection(self):
        daoSimilarities = DAO_db_similarity()
        daoCommunities = DAO_db_community()
        
        # Get all the communities associated to the new perspective
        communitiesA = daoCommunities.getCommunitiesPerspective(self.perspectiveId)

        # Get index of the medoid explanation
        # indexMedoidExplanation = self.getIndexMedoidExplanation(communitiesA)

        # Compute similarity between the perspective communities
        # pairs = combinations_with_replacement(range(len(communitiesA)), r=2)
        pairs = combinations(range(len(communitiesA)), r=2)

        for p in pairs:
            print("elems")
            print(p[0])
            print(p[1])
            print("\n")
            communityA = communitiesA[p[0]]
            communityB = communitiesA[p[1]]

            similarity = self.similarityCommunities(communityA, communityB)

            # Insert it in the two different orders
            similarityJson = {
                "similarity-function": "similarityMedoidCommunities",
                "value": similarity,
            }
            daoSimilarities.updateSimilarity(communityA['id'], communityB['id'], similarityJson)
            daoSimilarities.updateSimilarity(communityB['id'], communityA['id'], similarityJson)


    def distanceCommunities(self, communityA, communityB):
        # Get medoids (dm: distance matrix)
        # medoidA = communityA['explanations'][indexMedoidExplanation]['explanation_data']['id']
        # medoidB = communityB['explanations'][indexMedoidExplanation]['explanation_data']['id']

        distance = 1.0

        try:

            # Get representative citizen

            # centroidA = communityA['centroid']
            # centroidB = communityB['centroid']

            medoidA = communityA['medoid']
            medoidB = communityB['medoid']

            # Get distance between the medoids (implicit attributes [interaction attributes])
            userList = self.data['userid'].to_list()
            medoidA_distanceMatrixIndex = userList.index(medoidA)
            medoidB_distanceMatrixIndex = userList.index(medoidB)

            distance = self.distanceMatrix[medoidA_distanceMatrixIndex, medoidB_distanceMatrixIndex]

        except Exception as e:

            print("Error calculating similarities between communities")
            raise Exception(e)

        return distance

    def similarityCommunities(self, communityA, communityB):
        return 1 - self.distanceCommunities(communityA, communityB)
    
